//
//  BookListViewController.swift
//  BookPlace
//
//  Created by Artem Lyksa on 3/8/17.
//  Copyright (c) 2017 Artem Lyksa. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol BookListViewControllerInput
{
    func displayBookList(viewModel: BookList.GetBookList.ViewModel)
    func displayBookImage(viewModel: BookList.GetBookImage.ViewModel)
}

protocol BookListViewControllerOutput
{
    func getBookList(request: BookList.GetBookList.Request)
    func getImage(request: BookList.GetBookImage.Request)
    func stopLoadingImage(request: BookList.StopLoadingImageProcess.Request)
}

class BookListViewController: UIViewController, BookListViewControllerInput
{
    
    var output: BookListViewControllerOutput!
    var router: BookListRouter!
    var dataSource: [Book] = []
    var heights = [IndexPath:CGFloat]()
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var searchBar: UISearchBar!
    // MARK: - Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        BookListConfigurator.sharedInstance.configure(viewController: self)
        tabBarController?.navigationItem.hidesBackButton = true
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        tableView.rowHeight = UITableViewAutomaticDimension
        tableView.estimatedRowHeight = 100.0
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        searchBar.isHidden = false
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        searchBar.isHidden = true
        output.stopLoadingImage(request: BookList.StopLoadingImageProcess.Request())
    }
    
    func displayBookList(viewModel: BookList.GetBookList.ViewModel) {
        dataSource = viewModel.bookList
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    
    func displayBookImage(viewModel: BookList.GetBookImage.ViewModel) {
        guard let row = dataSource.index(of: viewModel.book) else { return }
        let indexPath = IndexPath(row: row, section: 0)
        DispatchQueue.main.async {
            if let visiblePaths = self.tableView.indexPathsForVisibleRows, visiblePaths.contains(indexPath) {
                self.tableView.reloadRows(at: [indexPath], with: .none)
            }
        }
    }
}

extension BookListViewController: UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dataSource.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let bookCell = tableView.dequeueReusableCell(withIdentifier: "bookCell", for: indexPath) as! BookTableViewCell
        let book = dataSource[indexPath.row]
        bookCell.bookNameLabel.text = book.name
        bookCell.bookAuthorLabel.text = book.authors
        if let image = book.image {
            bookCell.bookImageView.image = image
        } else {
            output.getImage(request: BookList.GetBookImage.Request(book: book))
        }
        return bookCell
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if (cell.frame.size.height > 0) {
            heights[indexPath] = cell.frame.size.height
        }
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        if let height = heights[indexPath], height > 10.0 {
            return height
        } else {
            return 100.0
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        router.navigateToBookDetailsScene(fromIndexPath: indexPath)
    }
    

    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        if let text = searchBar.text, text.characters.count > 0 {
            output.getBookList(request: BookList.GetBookList.Request(searchString: text))
        }
        searchBar.resignFirstResponder()
    }
}
