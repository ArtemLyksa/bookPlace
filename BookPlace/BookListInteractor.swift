//
//  BookListInteractor.swift
//  BookPlace
//
//  Created by Artem Lyksa on 3/8/17.
//  Copyright (c) 2017 Artem Lyksa. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol BookListInteractorInput
{
    func getBookList(request: BookList.GetBookList.Request)
//    func getImage(request: BookList.GetBookImage.Request)
    func stopLoadingImage(request: BookList.StopLoadingImageProcess.Request)
}

protocol BookListInteractorOutput
{
    func presentBookLits(response: BookList.GetBookList.Response)
    func presentBookImage(response:BookList.GetBookImage.Response)
}

class BookListInteractor: BookListInteractorInput
{
    var output: BookListInteractorOutput!
    let queue = OperationQueue()
    var worker: BookListWorker!
    
    // MARK: - Business logic
    func getBookList(request: BookList.GetBookList.Request)
    {
        SearchService.getBookListWithString(searchString: request.searchString) { (json, error) in
            guard let result = json else { return }
            self.createBooksFromJson(json: result)
        }
    }
    
    func createBooksFromJson(json: [String:AnyObject])
    {
        var books = [Book]()
        if let items = json["items"] as? [[String:AnyObject]] {
            for item in items {
                guard let volumeInfo = item["volumeInfo"] as? [String : AnyObject] else { continue }
                guard let book = createBookObject(volumeInfo: volumeInfo) else { continue }
                books.append(book)
            }
        }
        output.presentBookLits(response: BookList.GetBookList.Response(bookList: books))
    }
    
    func createBookObject(volumeInfo: [String:AnyObject]) -> (Book?)
    {
        guard let title = volumeInfo["title"] as? String,
            let authors = volumeInfo["authors"] as? [String],
            let description = volumeInfo["description"] as? String else { return nil }
        let book = Book.init(name: title, authors: authors, bookDescription: description)
        
        guard let imageLinks = volumeInfo["imageLinks"] as? [String : AnyObject] else { return book }
        if let thumbnail = imageLinks["thumbnail"] as? String {
            book.imageURL = URL.init(string: thumbnail)
            return book
        }
        if let smallThumbnail = imageLinks["smallThumbnail"] as? String {
            book.imageURL = URL.init(string: smallThumbnail)
            return book
        }
        if let previewLink = imageLinks["previewLink"] as? String {
            book.imageURL = URL.init(string: previewLink)
            return book
        }
        return book
    }

    func getImage(request: BookList.GetBookImage.Request) {
        guard let imageURL = request.imageURL else { return }
        let imgOperation = BlockOperation.init(block: {
            do {
                let imageData = try Data.init(contentsOf: imageURL)
                self.output.presentBookImage(response: BookList.GetBookImage.Response(imageData: imageData, indexPath: request.indexPath))
            } catch {
                print("Data is nil")
            }
        })
        queue.qualityOfService = .background
        queue.addOperation(imgOperation)
    }
    
    func stopLoadingImage(request: BookList.StopLoadingImageProcess.Request) {
        queue.cancelAllOperations()
    }
}
