//
//  BookDetailsViewController.swift
//  BookPlace
//
//  Created by Artem Lyksa on 3/9/17.
//  Copyright (c) 2017 Artem Lyksa. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol BookDetailsViewControllerInput
{
    func displayRightBarButton(viewModel:BookDetails.CreateRightBarButton.ViewModel)
    func addBookToBasket(request:BookDetails.AddBookToBasket.ViewModel)
    func removeBookFormBasket(request:BookDetails.RemoveBookFromBasket.ViewModel)
}

protocol BookDetailsViewControllerOutput
{
    func createRightBarButton(request:BookDetails.CreateRightBarButton.Request)
    func addBookToBasket(request:BookDetails.AddBookToBasket.Request)
    func removeBookFormBasket(request:BookDetails.RemoveBookFromBasket.Request)
}

class BookDetailsViewController: UIViewController, BookDetailsViewControllerInput
{
    var output: BookDetailsViewControllerOutput!
    var router: BookDetailsRouter!
    var curentBook: Book!
    var addToBasketBarButton: UIBarButtonItem!
    
    @IBOutlet weak var navItem: UINavigationItem!
    @IBOutlet weak var bookImageView: UIImageView!
    @IBOutlet weak var bookNameLabel: UILabel!
    @IBOutlet weak var bookAuthorsLabel: UILabel!
    @IBOutlet weak var bookDescriptionTextView: UITextView!
    // MARK: - Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        BookDetailsConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setUpUIElements()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        bookDescriptionTextView.contentOffset = CGPoint.zero
        bookDescriptionTextView.isHidden = false
    }
    
    func setUpUIElements()
    {
        bookImageView.image = curentBook.image
        bookNameLabel.text = curentBook.name
        bookAuthorsLabel.text = curentBook.authors
        bookDescriptionTextView.isHidden = true
        bookDescriptionTextView.text = curentBook.bookDescription
        if (User.sharedInstance.books.contains(curentBook)) {
            output.createRightBarButton(request: BookDetails.CreateRightBarButton.Request(title: "Удалить"))
        } else {
            output.createRightBarButton(request: BookDetails.CreateRightBarButton.Request(title: "В корзину"))
        }
    }
    
    func displayRightBarButton(viewModel: BookDetails.CreateRightBarButton.ViewModel) {
        let rightBarButtonItem = viewModel.rightBarButtonItem
        rightBarButtonItem!.target = self
        rightBarButtonItem!.action = #selector(addToBacketButtonTapped)
        navItem.rightBarButtonItem = rightBarButtonItem
    }
    
    func addBookToBasket(request: BookDetails.AddBookToBasket.ViewModel) {
        User.sharedInstance.books.append(curentBook)
        output.createRightBarButton(request: BookDetails.CreateRightBarButton.Request(title: "Удалить"))
    }
    
    func removeBookFormBasket(request: BookDetails.RemoveBookFromBasket.ViewModel) {
        guard let index = User.sharedInstance.books.index(of: curentBook) else { return }
        User.sharedInstance.books.remove(at: index)
        output.createRightBarButton(request: BookDetails.CreateRightBarButton.Request(title: "В корзину"))
    }
    
    func addToBacketButtonTapped(_ sender: UIBarButtonItem) {
        if (User.sharedInstance.books.contains(curentBook)) {
            output.removeBookFormBasket(request: BookDetails.RemoveBookFromBasket.Request())
        } else {
            output.addBookToBasket(request: BookDetails.AddBookToBasket.Request())
        }
    }
}
