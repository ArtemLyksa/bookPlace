//
//  SignInViewController.swift
//  BookPlace
//
//  Created by Artem Lyksa on 3/8/17.
//  Copyright (c) 2017 Artem Lyksa. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import FBSDKLoginKit
import FBSDKCoreKit
import GoogleSignIn
import Google

protocol SignInViewControllerInput
{
    func displayUserInfo(viewModel: SignIn.Authenticate.ViewModel)
}

protocol SignInViewControllerOutput
{
    func signInWithFacebook(request: SignIn.Authenticate.Request)
    func signInWithGoogle(request: SignIn.Authenticate.Request)
    func getImageForUser(requset: SignIn.GetImage.Request)
}

class SignInViewController: UIViewController, SignInViewControllerInput
{
    var output: SignInViewControllerOutput!
    var router: SignInRouter!
    
    // MARK: - Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        SignInConfigurator.sharedInstance.configure(viewController: self)
        GIDSignIn.sharedInstance().uiDelegate = self
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        view.isUserInteractionEnabled = true
    }
    

    @IBAction func loginWithFacebookButtonTapped(_ sender: UIButton) {
        view.isUserInteractionEnabled = false
        FBSDKAppEvents.activateApp()
        FBSDKApplicationDelegate.sharedInstance().application(UIApplication.shared, didFinishLaunchingWithOptions: nil)
        output.signInWithFacebook(request: SignIn.Authenticate.Request())
    }
    
    @IBAction func loginWithGoogleButtonTapped(_ sender: UIButton) {
        view.isUserInteractionEnabled = false
        let appDelegate = UIApplication.shared.delegate as! AppDelegate
        appDelegate.signInWithFacebook = false
        var configureError: NSError?
        GGLContext.sharedInstance().configureWithError(&configureError)
        assert(configureError == nil, "Error configuring Google services: \(configureError)")
        output.signInWithGoogle(request: SignIn.Authenticate.Request())
    }
    
    func displayUserInfo(viewModel: SignIn.Authenticate.ViewModel) {
        output.getImageForUser(requset: SignIn.GetImage.Request(imageURL: viewModel.user.imageURL))
        router.navigateToTabBarScene()
    }
}


extension SignInViewController: GIDSignInUIDelegate {
    func sign(_ signIn: GIDSignIn!, present viewController: UIViewController!) {
        self.present(viewController, animated: true, completion: nil)
    }
}

extension AppDelegate {
    func application(_ app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -> Bool {
        if signInWithFacebook == true {
            return FBSDKApplicationDelegate.sharedInstance().application(app, open: url, options: options)
        } else {
            return GIDSignIn.sharedInstance().handle(url,
                                                     sourceApplication: options[UIApplicationOpenURLOptionsKey.sourceApplication] as? String,
                                                     annotation: options[UIApplicationOpenURLOptionsKey.annotation])
        }
    }
}
